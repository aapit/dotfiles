# -*- mode: org; coding: utf-8; -*-
#+author: David Spreekmeester @aapit
#+filetags: :software:
* David's Doom Emacs config
:PROPERTIES:
:ID:       emacs-config
:header-args: :tangle "config.el" :results silent
:END:
** initialization
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
; Generated config by @aapit
 #+END_SRC
** general
:PROPERTIES:
:VISIBILITY: content
:END:
*** locale
In my geographic area, the week starts on Monday (=1=).
Default is Sunday (=0=).
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1)
(setq
 display-time-format "%H:%M"
 display-time-24hr-format t)
(setq system-time-locale "nl_NL.utf8")
(setenv "LANG" "nl_NL.utf8")
#+END_SRC
*** secrets
 #+BEGIN_SRC emacs-lisp
(load! "secrets.el" doom-private-dir)
#+END_SRC
*** trash
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4)                                      ; Set width for tabs
#+END_SRC
*** browser
 #+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "brave")
#+END_SRC
** UI
:PROPERTIES:
:VISIBILITY: content
:END:
*** fonts
Setting default font and /Symbola/ as emoji fallback.
 #+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")

(setq doom-unicode-font (font-spec :name "Symbola"))

(setq doom-font (font-spec :family "Lotion" :size (if (string= (system-name) "tinynozem") 48 36)))
;(setq doom-font (font-spec :family "DaddyTimeMono" :size (if (string= (system-name) "tinynozem") 48 36)))
;(setq doom-font (font-spec :family "FantasqueSansMono Nerd Font Mono" :size (if (string= (system-name) "tinynozem") 48 36)))
 #+END_SRC
*** mouse
[2021-01-27 Wed] Disabled the disablement, perhaps temporarily
 #+BEGIN_EXAMPLE emacs-lisp
(add-hook 'emacs-startup-hook (lambda ()
    (global-disable-mouse-mode)
))
#+END_EXAMPLE
*** appearance
#+begin_src emacs-lisp
(setq doom-theme 'doom-horizon)
(setq display-time-use-mail-icon t)
(setq display-line-numbers-type 'relative)
(setq org-ellipsis "…")
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
                                        ; remove window chrome
(setq default-frame-alist '((undecorated . t)))

(add-hook 'emacs-startup-hook (lambda ()
                                        ;(toggle-frame-fullscreen)
                                        ;(display-battery-mode)
                                (delete-selection-mode 1) ; replace selection when inserting text
                                ))
#+end_src
**** hide utf-8 encoding in modeline
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "we expect the encoding to be lf utf-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
**** popup rules
#+begin_src emacs-lisp
(when (> (display-pixel-width) '1200)
  (set-popup-rule! "*org agenda*" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "capture-" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*capture*" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*messages*" :side 'left :size .30 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*helm*" :side 'left :size .30 :select t :vslot 5 :ttl 3))
(when (<= (display-pixel-width) '1200)
  (set-popup-rule! "*org agenda*" :side 'bottom :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "capture-" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*capture*" :side 'bottom :size .30 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*messages*" :side 'left :size .30 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*helm*" :side 'bottom :size .30 :select t :vslot 5 :ttl 3))
#+end_src
**** org-related
 #+begin_src emacs-lisp :tangle "config.el" :results silent
(setq org-agenda-span 'week)

;; hide /emphasis markers for italics/ in org-mode
(setq org-hide-emphasis-markers t)

; disabling for performance, for now
;(setq org-startup-with-inline-images t)

(setq-default org-download-image-dir "~/Nextcloud/org-mode/pics")

;; follow output
(setq compilation-scroll-output t)
#+end_src
**** disabled
***** emojify
#+begin_example emacs-lisp
(add-hook 'after-init-hook #'global-emojify-mode)
#+end_example
***** org-roam links
#+begin_example emacs-lisp
;; unfortunately, at this point [2020-07-08 wed],
;; there is no way to style regular non-link text in the org-roam buffer.
;; therefore, the only customizable property that blends in with the rest is link color.
(custom-set-faces
 '(org-roam-link ((t (:foreground "#a4581e"))))
 '(org-roam-link-current ((t (:foreground "#696070"))))
)
#+end_example

***** org-mode checkboxes
#+begin_example emacs-lisp
;; org-mode checkboxes
(add-hook 'evil-org-mode-hook (lambda ()
   "beautify org checkbox symbol"
   (push '("[ ]" . "☐") prettify-symbols-alist)
   (push '("[x]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "⊡" ) prettify-symbols-alist)
   (prettify-symbols-mode)))
 #+end_example
*** keys
**** general functions
 #+BEGIN_SRC emacs-lisp
;; Open
(map! :leader
    :prefix "o"
    :desc "Shell" "z" #'shell
    :desc "Term" "t" #'term
)

;; Quick window split shortcuts
(map! :leader
    :prefix "w"
    :desc "Split Hori" "-" #'evil-window-split
    :desc "Split Vert" "\\" #'evil-window-vsplit
)
#+END_SRC
**** window navigation
 #+begin_src emacs-lisp
(map!
   :prefix "`"
   :n "h" #'evil-window-left
   :n "l" #'evil-window-right
   :n "k" #'evil-window-up
   :n "j" #'evil-window-down
   :n "-" #'evil-window-split
   :n "\\" #'evil-window-vsplit
   :n "`" #'other-window
   :n "c" '(lambda () (interactive)(+workspace/new))
   :n "x" '(lambda () (interactive)(+workspace/delete (+workspace-current-name)))
   :n "m-x" #'evil-window-delete
)
#+end_src
**** Org-mode related
 #+BEGIN_SRC emacs-lisp
(map! :after evil-org
    :map evil-org-mode-map
    :n "M-j" #'org-metadown
    :n "M-k" #'org-metaup
)
;; Export
(map! :after evil-org
    :map org-mode-map
    :leader
    :prefix ("e" . "export")
    :desc "html export (buffer)" "h" #'org-html-export-to-html
    :desc "various (region to pdf, etc)" "v" #'org-export-dispatch
    :desc "pdf (buffer)" "p" #'org-latex-export-to-pdf
)
;; Agenda
(map!
    :leader
    :desc "Agenda" "a" #'org-agenda
)
#+END_SRC
**** Org-roam related
 #+BEGIN_SRC emacs-lisp
;; Insert
(map! :after org-roam
        :map org-roam-mode-map
        :leader
        :prefix "i"
        :desc "Timestamp" "T" #'org-time-stamp
        :desc "Timestamp inactive" "t" #'org-time-stamp-inactive
)
;; Notes
(map! :after org-roam
        :map org-mode-map
        :leader
        :desc "Find, Insert note" "v" #'org-roam-node-find
)
(map! :after org-roam
        :map org-mode-map
        :leader
        :prefix "n"
        :desc "Graph server" "g" #'org-roam-server-mode
)
#+END_SRC
** capture templates
*** Org Ref templates
 #+BEGIN_SRC emacs-lisp
(setq org-roam-ref-capture-templates
    '(("r" "ref" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "websites/${slug}"
        :head "#+TITLE: ${title}
,#+ROAM_KEY: ${ref}
- source :: ${ref}"
        :unnarrowed t)))
#+END_SRC
*** Org-roam capture templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-capture-templates
    `(
        ; Default
        ("d" "Default" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: \n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Encrypted
        ("e" "Encrypted" plain "%?"
        :target (file+head "${slug}.org.gpg"
            "%(concat \"#+title: ${title}\n#+filetags: \n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Company
        ("c" "Company" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: :company:\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Hardware
        ("h" "Hardware" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: :hardware:\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Location
        ("l" "Location" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: :geo:\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Person
        ("p" "Person" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: :person:\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Software
        ("s" "Software" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: :software:\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
        ; Substance
        ("u" "Substance" plain "%?"
        :target (file+head "${slug}.org"
            "%(concat \"#+title: ${title}\n#+filetags: :substance:\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n\")")
        :unnarrowed t)
    )
)
#+END_SRC
*** Org regular capture templates
#+BEGIN_SRC emacs-lisp
(after! evil-org
    (setq org-capture-templates
        `(
            ; Todo Group
            ("t" "Todo")
            ; Inbox home
            ("tt" "Todo Thuis" entry (file+headline "~/Notes/todo.org" "Inbox")
                "* TODO %?\n%i\n"
                :unnarrowed t)
            ; Log Group
            ("l" "Log")
            ; B log
            ("lb" "B log" entry (file+olp+datetree "~/Notes/hashlog.org.gpg")
                "* %U %?\n%i\n"
                :tree-type week
                :prepend t
                :unnarrowed t)
            ; Health
            ("lh" "Health" entry (file+olp+datetree "~/Notes/healthlog.org")
                "* %U \n|Moe (1-10)|%?|\n|Tinnitus (1-10)||\n|Sleep Score||\n|Puls||\n|Sys||\n|Dia||\n|Coffee||\n"
                :tree-type week
                :prepend t
                :unnarrowed t)
            ("lj" "Journal" entry (file+olp+datetree "~/Notes/journal.org")
                "* %U %?\n%i\n"
                :tree-type week
                :prepend t
                :unnarrowed t)
        )
    )
)

;; Capture shortcuts: Todos
(map!
    :leader
    :prefix ("d" . "todo")
    :desc "Thuis" "t" (lambda () (interactive) (org-capture nil "tt"))
)
;; Capture shortcuts: Logs
(map!
    :leader
    :prefix ("l" . "log")
    :desc "B log" "b" (lambda () (interactive) (org-capture nil "lb"))
    :desc "Health log" "h" (lambda () (interactive) (org-capture nil "lh"))
    :desc "Journal" "j" (lambda () (interactive) (org-capture nil "lj"))
)
#+END_SRC
*** Docs: Params
| =%t= | Date, active                      |
| =%T= | Date + time, active               |
| =%u= | Date, inactive                    |
| =%U= | Date + time, inactive             |
|    |                                   |
| =%i= | Initial content                   |
| =%a= | Annotation, normally the          |
|    | link created with org-store-link. |

[[https://orgmode.org/manual/Template-expansion.html#Template-expansion][Template params in Org-mode manual]]

"* %?\nEntered on %U\n  %i\n  %a\nHoi %m"

*** Example: Original Org capture templates
#+begin_example elisp
(("t" "Personal todo" entry
  (file+headline +org-capture-todo-file "Inbox")
  "* [ ] %?\n%i\n%a" :prepend t)
 ("n" "Personal notes" entry
  (file+headline +org-capture-notes-file "Inbox")
  "* %u %?\n%i\n%a" :prepend t)
 ("j" "Journal" entry
  (file+olp+datetree +org-capture-journal-file)
  "* %U %?\n%i\n%a" :prepend t)
 ("p" "Templates for projects")
 ("pt" "Project-local todo" entry
  (file+headline +org-capture-project-todo-file "Inbox")
  "* TODO %?\n%i\n%a" :prepend t)
 ("pn" "Project-local notes" entry
  (file+headline +org-capture-project-notes-file "Inbox")
  "* %U %?\n%i\n%a" :prepend t)
 ("pc" "Project-local changelog" entry
  (file+headline +org-capture-project-changelog-file "Unreleased")
  "* %U %?\n%i\n%a" :prepend t)
 ("o" "Centralized templates for projects")
 ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
 ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
 ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))
#+end_example
*** NEXT Implement more capture tpl feats
- https://orgmode.org/manual/Template-elements.html
- https://www.gnu.org/software/emacs/manual/html_node/org/Capture-templates.html
- https://org-roam.readthedocs.io/en/master/templating/

Je kunt =:clock-in= gebruiken om direct een Org timer te starten.

- https://www.zmonster.me/2020/06/27/org-roam-introduction.html
** Flycheck
#+BEGIN_SRC emacs-lisp
(general-setq flycheck-global-modes '(not dir-locals-mode
                                            text-mode
                                            org-mode))
#+END_SRC
** Mail / Notmuch
For email in Emacs, I use [[id:f1b58b00-9b99-4ee4-8be8-c0f2203deb04][Notmuch]] in combination with [[id:dfced547-bd6f-486e-acd0-441da3c961e5][Lieer]] to deal with multiple Gmail boxes.

*** Deleting
=notmuch= inside Doom Emacs has a handy key binding (=d=) to tag a message for deletion.
However, this applies a =deleted= tag, while Gmail expects =trash= (pre-translation by Lieer).
Here I'm overriding the binding for notmuch-mode.

#+BEGIN_SRC emacs-lisp
(defun aap/notmuch-delete-search-message ()
    "Toggle trash tag for message."
    (interactive)
    (evil-collection-notmuch-toggle-tag "trash" "search" 'notmuch-search-next-thread))

(defun aap/notmuch-delete-show-message ()
  "Toggle trash tag for message."
  (interactive)
  (evil-collection-notmuch-toggle-tag "trash" "show"))

(map! :after notmuch
      :map notmuch-search-mode-map
      :nv "d" #'aap/notmuch-delete-search-message)
(map! :after notmuch
      :map notmuch-show-mode-map
      :nv "d" #'aap/notmuch-delete-show-message)
#+END_SRC

*** Sending
*** Identities
#+BEGIN_SRC emacs-lisp
(setq gnus-alias-identity-alist
    '(("personal"
        nil ;; Does not refer to any other identity
        "David Spreekmeester <david@spreekmeester.nl>" ;; Sender address
        nil ;; No organization header
        nil ;; No extra headers
        nil ;; No extra body text
        "~/Templates/mail-signatures/personal.txt")))
(setq gnus-alias-default-identity "personal")
;; Define rules to match work identity
(setq gnus-alias-identity-rules
    '(
        ("personal"
        ("any" "<\\(.+\\)\\@spreekmeester\\.nl" both) "personal")
        ))

;; Determine identity when message-mode loads
(add-hook 'message-setup-hook 'gnus-alias-determine-identity)
#+END_SRC
*** Mail accounts
#+BEGIN_SRC emacs-lisp
(setq sendmail-program "gmi")

(defun aap/set-mail-sender-personal ()
    (interactive)
    (setq message-sendmail-extra-arguments '("send" "--quiet" "-t" "-C" "~/Mail/account.personal"))
    (when (eq major-mode 'message-mode)
        (gnus-alias-use-identity "personal"))
)

(aap/set-mail-sender-personal)

(map! :leader
    :prefix ("M" . "mail")
    :desc "personal" "p" #'aap/set-mail-sender-personal
    :desc "select identity" "s" #'gnus-alias-select-identity
)
#+END_SRC

[[https://github.com/gauteh/lieer/wiki/GNU-Emacs-and-Lieer][Lieer docs on Emacs + Lieer]]

Also:
#+begin_quote
Since your emails will be saved automatically on GMail when sending them with Lieer, you will likely want to turn off saving local copies of outgoing mail.
#+end_quote
#+BEGIN_SRC emacs-lisp
(setq notmuch-fcc-dirs nil)
#+END_SRC
** Org
:PROPERTIES:
:VISIBILITY: content
:END:
*** dirs
**** set Org dir
#+begin_quote
Where are my Org files typically located? Org acutally uses this variable only under rare circumstances, like when filing remember notes in an interactive way and prompting you for an Org file to put the note into.
#+end_quote
[[https://orgmode.org/worg/org-configs/org-customization-guide.html][Org customization guide]]
 #+BEGIN_SRC emacs-lisp
;; `org-directory' must be set before org loads.
(setq org-directory "~/Notes/")
#+END_SRC
**** use only tagged files as todo files
=org-agenda-files= sets the source dir for the todo list.
#+begin_quote
Which files do I want to be checked for entries when compiling my agenda?
#+end_quote
[[https://orgmode.org/worg/org-configs/org-customization-guide.html][Org customization guide]]
#+BEGIN_SRC emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (seq-uniq (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list)))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "project")))

;; Build the agenda list the first time for the session
(after! org-roam
    (my/org-roam-refresh-agenda-list))
#+END_SRC
*** agenda
**** custom agenda views
 #+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
    '(
        ("p" "Privé" agenda "Persoonlijk"
         ((org-agenda-files '("~/Notes/todo.org"))))
    )
)
#+END_SRC
**** agenda groups
#+BEGIN_SRC emacs-lisp
;(let ((org-super-agenda-groups
;       '((:auto-category t))))
;  (org-agenda-list))

(setq org-super-agenda-groups
      '((:name "Next Items"
               :time-grid t
               :tag ("NEXT" "outbox"))
        (:name "Important"
               :priority "A")
        (:name "Quick Picks"
               :effort< "0:30")
        (:priority<= "B"
                     :scheduled future
                     :order 1)))
#+END_SRC
*** export
Setting some non-insane defaults for LaTeX PDF export and such.

**** Links
 #+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-latex-packages-alist "\\hypersetup{setpagesize=false}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{colorlinks=true}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{linkcolor=blue}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{draft}" t)
)
#+END_SRC
For now, I set all LaTeX links to /draft/, to hide them in exports.

***** NEXT [#C] Show only urls in LaTeX export
Ideally, I only want to export urls, but ignore the internal Org-roam links in exporting.

Perhaps achievable with one of these options:
#+begin_example latex
hidelinks
\hyper@link
\hyper@linkfile
\hyper@linkurl
#+end_example
**** Font
 #+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-latex-packages-alist "\\usepackage{lmodern}" t)
)
#+END_SRC
***** TODO Fix LaTeX font export
Setting above doesn't seem to work yet.
Suspecting this method only works per document.
https://github.com/xgarrido/org-resume should provide enough working examples.
**** Paragraph
 #+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-latex-packages-alist "\\setlength\\parindent{0pt}" t)
)
#+END_SRC
**** Sources
- More options in this [[https://www.tug.org/applications/hyperref/manual.html#x1-90003.5][LaTeX hyperref manual]].
- [[https://www.overleaf.com/learn/latex/Font_sizes,_families,_and_styles][Very clear guide]] by Overleaf
- Some settings are inspired by:
  [[http://clothoid.html.xdomain.jp/2018/org-latex-pdf-with-minted-python.html][Clothoid's org-latex-pdf user config]]
*** GUI
Customizing the appearance of bullets and priorities.
#+BEGIN_SRC emacs-lisp
(after! org
  (add-hook! 'org-mode-hook (lambda ()
                              (org-superstar-mode 1)
                              (org-fancy-priorities-mode 1)
                              ))
  )

(after! org-superstar
  (setq org-superstar-headline-bullets-list '("⚛" "◉" "○" "✸" "✿" "✤" "✜" "◆")
        org-superstar-prettify-item-bullets t))
#+END_SRC
*** performance
 #+BEGIN_SRC emacs-lisp
(after! org
    (setq org-agenda-dim-blocked-tasks nil)
    (setq org-agenda-inhibit-startup nil)
    (setq org-agenda-use-tag-inheritance nil)
    (setq org-agenda-ignore-properties '(visibility category))
    (setq org-agenda-sticky t)
)
#+END_SRC
*** tags
#+BEGIN_SRC emacs-lisp
;(after! org
    (setq org-use-tag-inheritance nil)
    (setq org-tags-exclude-from-inheritance '("crypt" "index"))
;)
(after! evil-org
    (setq org-use-tag-inheritance nil)
    (setq org-tags-exclude-from-inheritance '("crypt" "index"))
)
(after! org
    (setq org-use-tag-inheritance nil)
    (setq org-tags-exclude-from-inheritance '("crypt" "index"))
)
(after! org-roam
    (setq org-use-tag-inheritance nil)
    (setq org-tags-exclude-from-inheritance '("crypt" "index"))
)
#+END_SRC
*** todo
**** todo settings
 #+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "PROJ" "IDEA(i)")))
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "maroon1" :weight bold)
                ("NEXT" :foreground "light sea green")
                ("DONE" :foreground "#888888")
                ("PROJ" :foreground "purple1" :weight bold)
                ("IDEA" :foreground "purple1" :weight bold)
                )))
  (setq-default org-export-with-todo-keywords nil)
  (setq-default org-enforce-todo-dependencies t)
  )

(use-package! org-fancy-priorities
  :defer t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "▶" "⏳")))
#+END_SRC
** Org-roam
:PROPERTIES:
:VISIBILITY: content
:END:
*** general
 #+BEGIN_SRC emacs-lisp
; This can't be a symlink or Org-roam will get confused
(setq org-roam-directory "~/Nextcloud/org-mode/notes/")
;(setq org-roam-db-location "~/Nextcloud/org-mode/org-roam.db")
#+END_SRC
*** search
Display template voor node search.
In eerste instantie werd de note titel ingekort tot te weinig karakters.
 #+BEGIN_SRC emacs-lisp
(after! org-roam
    (setq org-roam-node-display-template
        (concat (propertize "${doom-tags:30}" 'face 'org-tag) " ${doom-hierarchy:120}"))
)
#+END_SRC
[2023-01-12 Thu]
Jethro laat ook custom attributen zien bij de resultaten:
https://jethrokuan.github.io/org-roam-guide/
** PHP
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
;; php
(use-package! phpactor
  :mode "\\.php\\'"
  :defer t
)
(use-package! company-phpactor
  :mode "\\.php\\'"
  :defer t
)
;;(composer-setup-managed-phar)
;;(phpactor-install-or-update)
(use-package! php-mode
  :mode "\\.php\\'"
  :defer t
  :hook ((php-mode . (lambda () (set (make-local-variable 'company-backends)
       '(;; list of backends
         company-phpactor
         company-files
         ))))))
#+END_SRC
** Projectile
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/Scripts/" "~/Sites/" "~/Remotes" "~/Lab"))
#+END_SRC
* caveats
:PROPERTIES:
:VISIBILITY: folded
:END:
Apparently, =org-babel= interprets source blocks with type =emacs-lisp=, but not with =elisp=.
Also see this [[https://blog.thomasheartman.com/posts/org-babel-load-file-doesnt-tangle-correctly][blog post on org-babel incorrect tangling]].
* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
