# -*- mode: org; coding: utf-8; -*-
 #+AUTHOR: David Spreekmeester @aapit
* David's Doom Emacs Config
:PROPERTIES:
:VISIBILITY: children
:header-args: :tangle "config.el" :results silent
:END:
** Initialization
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
 #+END_SRC
** General
:PROPERTIES:
:VISIBILITY: content
:END:
*** Locale
In my geographic area, the week starts on Monday (=1=).
Default is Sunday (=0=).

 #+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1)
(setq
 display-time-format "%H:%M"
 display-time-24hr-format t)
 #+END_SRC
*** Secrets
 #+BEGIN_SRC emacs-lisp
(load! "secrets.el" doom-private-dir)
#+END_SRC
*** Trash
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4)                                      ; Set width for tabs
#+END_SRC
*** Browser
 #+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "brave-browser")
#+END_SRC
** UI
:PROPERTIES:
:VISIBILITY: content
:END:
*** Fonts
Setting default font and /Symbola/ as emoji fallback.
 #+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")

(setq doom-font (font-spec :family "Liberation Mono" :size 36))
(setq doom-unicode-font (font-spec :name "Symbola"))
 #+END_SRC
*** Mouse
 #+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook (lambda ()
    (global-disable-mouse-mode)
))
#+END_SRC
*** Appearance
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-horizon)
(setq display-time-use-mail-icon t)
(setq display-line-numbers-type 'relative)
(setq org-ellipsis "…")

(add-hook 'emacs-startup-hook (lambda ()
    (toggle-frame-fullscreen)
    (display-battery-mode)
    (delete-selection-mode 1) ; Replace selection when inserting text
))
#+END_SRC
**** Hide UTF-8 encoding in modeline
#+BEGIN_SRC emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC
**** Emojify
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC
**** Org-roam links
#+BEGIN_SRC emacs-lisp
;; Unfortunately, at this point [2020-07-08 Wed],
;; there is no way to style regular non-link text in the Org-roam buffer.
;; Therefore, the only customizable property that blends in with the rest is link color.
(custom-set-faces
 '(org-roam-link ((t (:foreground "#8B61AB"))))
 '(org-roam-link-current ((t (:foreground "#57287C"))))
)
#+END_SRC

**** Org-mode Checkboxes
#+BEGIN_SRC emacs-lisp
;; Org-mode checkboxes
(add-hook 'evil-org-mode-hook (lambda ()
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" . "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "⊡" ) prettify-symbols-alist)
   (prettify-symbols-mode)))
 #+END_SRC
**** Popup Rules
#+BEGIN_SRC emacs-lisp
(when (> (display-pixel-width) '1200)
  (set-popup-rule! "*Org Agenda*" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "CAPTURE-" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*Capture*" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*Messages*" :side 'left :size .30 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*helm*" :side 'left :size .30 :select t :vslot 5 :ttl 3))
(when (<= (display-pixel-width) '1200)
  (set-popup-rule! "*Org Agenda*" :side 'bottom :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "CAPTURE-" :side 'left :size .40 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*Capture*" :side 'bottom :size .30 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*Messages*" :side 'left :size .30 :select t :vslot 2 :ttl 3)
  (set-popup-rule! "*helm*" :side 'bottom :size .30 :select t :vslot 5 :ttl 3))
#+END_SRC
**** Org-related
 #+BEGIN_SRC emacs-lisp :tangle "config.el" :results silent
(setq org-agenda-span 'week)

;; Hide /emphasis markers for italics/ in org-mode
(setq org-hide-emphasis-markers t)

; Disabling for performance, for now
;(setq org-startup-with-inline-images t)

(setq-default org-download-image-dir "~/Nextcloud/org-mode/pics")

;; Follow output
(setq compilation-scroll-output t)
#+END_SRC
*** Keys
**** General functions
 #+BEGIN_SRC emacs-lisp
;; Open
(map! :leader
    :prefix "o"
    :desc "Shell" "z" #'shell
    :desc "Term" "t" #'term
)

;; Quick window split shortcuts
(map! :leader
    :prefix "w"
    :desc "Split Hori" "-" #'evil-window-split
    :desc "Split Vert" "\\" #'evil-window-vsplit
)
#+END_SRC
**** Org-mode related
 #+BEGIN_SRC emacs-lisp
(map! :after evil-org
    :map evil-org-mode-map
    :n "M-j" #'org-metadown
    :n "M-k" #'org-metaup
)
;; Export
(map! :after evil-org
    :map org-mode-map
    :leader
    :prefix ("e" . "export")
    :desc "html export (buffer)" "h" #'org-html-export-to-html
    :desc "various (region to pdf, etc)" "v" #'org-export-dispatch
    :desc "pdf (buffer)" "p" #'org-latex-export-to-pdf
)
;; Agenda
(map!
    :leader
    :desc "Agenda" "a" #'org-agenda
)
#+END_SRC
**** Org-roam related
 #+BEGIN_SRC emacs-lisp
;; Insert
(map! :after org-roam
        :map org-roam-mode-map
        :leader
        :prefix "i"
        :desc "Timestamp" "T" #'org-time-stamp
        :desc "Timestamp inactive" "t" #'org-time-stamp-inactive
)
;; Notes
(map! :after org-roam
        :map org-mode-map
        :leader
        :prefix "n"
        :desc "Find, Insert note" "q" #'org-roam-find-file
        :desc "Graph server" "g" #'org-roam-server-mode
        :desc "Rifle" "." #'helm-org-rifle
        :desc "Headline link" "h" #'counsel-org-link
)
#+END_SRC
** Capture templates
*** Org Ref templates
 #+BEGIN_SRC emacs-lisp
(setq org-roam-ref-capture-templates
    '(("r" "ref" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "websites/${slug}"
        :head "#+TITLE: ${title}
,#+ROAM_KEY: ${ref}
- source :: ${ref}"
        :unnarrowed t)))
#+END_SRC
*** Org-roam capture templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-capture-templates
    `(
        ; Default
        ("d" "Default" plain #'org-roam-capture--get-point "%?"
        :file-name "${slug}"
        :head "%(concat \"#+TITLE: ${title}\n#+roam_alias: \n#+roam_tags: \n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n* \" (upcase-initials \"${title}\") \"\n\")"
        :unnarrowed t)
        ; Software
        ("s" "Software" plain #'org-roam-capture--get-point "%?"
        :file-name "${slug}"
        :head "%(concat \"#+TITLE: ${title}\n#+roam_alias: \n#+roam_tags: software tech\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n* \" (upcase-initials \"${title}\") \"\n\")"
        :unnarrowed t)
        ; GRRR Project
        ("p" "GRRR Project" plain #'org-roam-capture--get-point "%?"
        :file-name "${slug}"
        :head "%(concat \"#+TITLE: ${title}\n#+roam_alias: \n#+roam_tags: grrr project\n#+date: \" (format-time-string \"%Y-%m-%d\" (current-time) t) \"\n* \" (upcase-initials \"${title}\") \"\n\")"
        :unnarrowed t)
    )
)
#+END_SRC
*** Org regular capture templates
#+BEGIN_SRC emacs-lisp
(after! evil-org
    (setq org-capture-templates
        `(
            ; Todo Group
            ("t" "Todo")
            ; Inbox home
            ("tt" "Todo Thuis" entry (file+headline "~/Notes/todo-thuis.org" "Inbox")
                "* TODO %?\n%i\n"
                :unnarrowed t)
            ; Inbox GRRR
            ("tg" "Todo GRRR" entry (file+headline "~/Notes/todo-grrr.org" "Inbox")
                "* TODO %?\n%i\n"
                :unnarrowed t)
            ; Log Group
            ("l" "Log")
            ; B log
            ("lb" "B log" entry (file+olp+datetree "~/Notes/hashlog.org")
                "* %U %?\n%i\n"
                :tree-type week
                :prepend t
                :unnarrowed t)
            ; Health
            ("lh" "Health" entry (file+olp+datetree "~/Notes/healthlog.org")
                "* %U \n|Sys|%?|\n|Dia||\n|Puls||\n|SpO2||\n|Methyl|\n|Coffee||\n"
                :tree-type week
                :prepend t
                :unnarrowed t)
            ("lj" "Journal" entry (file+olp+datetree "~/Notes/journal.org")
                "* %U %?\n%i\n"
                :tree-type week
                :prepend t
                :unnarrowed t)
            ; GRRR log
            ("lg" "GRRR log" entry (file+olp+datetree "~/Notes/grrr-log.org")
                "* %U %?\n%i\n"
                :tree-type week
                :clock-in t
                :prepend t
                :unnarrowed t)
        )
    )
)

;; Capture shortcuts: Todos
(map!
    :leader
    :prefix ("d" . "todo")
    :desc "Thuis" "t" (lambda () (interactive) (org-capture nil "tt"))
    :desc "GRRR" "g" (lambda () (interactive) (org-capture nil "tg"))
)
;; Capture shortcuts: Logs
(map!
    :leader
    :prefix ("l" . "log")
    :desc "GRRR" "g" (lambda () (interactive) (org-capture nil "lg"))
    :desc "B log" "b" (lambda () (interactive) (org-capture nil "lb"))
    :desc "Health log" "h" (lambda () (interactive) (org-capture nil "lh"))
    :desc "Journal" "j" (lambda () (interactive) (org-capture nil "lj"))
)
#+END_SRC
*** Docs: Params
| =%t= | Date, active                      |
| =%T= | Date + time, active               |
| =%u= | Date, inactive                    |
| =%U= | Date + time, inactive             |
|    |                                   |
| =%i= | Initial content                   |
| =%a= | Annotation, normally the          |
|    | link created with org-store-link. |

[[https://orgmode.org/manual/Template-expansion.html#Template-expansion][Template params in Org-mode manual]]

"* %?\nEntered on %U\n  %i\n  %a\nHoi %m"

*** Example: Original Org capture templates
#+begin_example elisp
(("t" "Personal todo" entry
  (file+headline +org-capture-todo-file "Inbox")
  "* [ ] %?\n%i\n%a" :prepend t)
 ("n" "Personal notes" entry
  (file+headline +org-capture-notes-file "Inbox")
  "* %u %?\n%i\n%a" :prepend t)
 ("j" "Journal" entry
  (file+olp+datetree +org-capture-journal-file)
  "* %U %?\n%i\n%a" :prepend t)
 ("p" "Templates for projects")
 ("pt" "Project-local todo" entry
  (file+headline +org-capture-project-todo-file "Inbox")
  "* TODO %?\n%i\n%a" :prepend t)
 ("pn" "Project-local notes" entry
  (file+headline +org-capture-project-notes-file "Inbox")
  "* %U %?\n%i\n%a" :prepend t)
 ("pc" "Project-local changelog" entry
  (file+headline +org-capture-project-changelog-file "Unreleased")
  "* %U %?\n%i\n%a" :prepend t)
 ("o" "Centralized templates for projects")
 ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
 ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
 ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))
#+end_example
*** TODO Implement more capture tpl feats
- https://orgmode.org/manual/Template-elements.html
- https://www.gnu.org/software/emacs/manual/html_node/org/Capture-templates.html
- https://org-roam.readthedocs.io/en/master/templating/

Je kunt =:clock-in= gebruiken om direct een Org timer te starten.

- https://www.zmonster.me/2020/06/27/org-roam-introduction.html
** Flycheck
#+BEGIN_SRC emacs-lisp
(general-setq flycheck-global-modes '(not dir-locals-mode
                                            text-mode
                                            org-mode))
#+END_SRC
** Mail / Notmuch
For email in Emacs, I use [[https://notmuchmail.org/][Notmuch]] in combination with [[http://lieer.gaute.vetsj.com/][Lieer]] to deal with multiple Gmail boxes.

*** Deleting
=notmuch= inside Doom Emacs has a handy key binding (=d=) to tag a message for deletion.
However, this applies a =deleted= tag, while Gmail expects =trash= (pre-translation by Lieer).
Here I'm overriding the binding for notmuch-mode.

#+BEGIN_SRC emacs-lisp
(defun aap/notmuch-delete-search-message ()
    "Toggle trash tag for message."
    (interactive)
    (evil-collection-notmuch-toggle-tag "trash" "search" 'notmuch-search-next-thread))

(defun aap/notmuch-delete-show-message ()
  "Toggle trash tag for message."
  (interactive)
  (evil-collection-notmuch-toggle-tag "trash" "show"))

(map! :after notmuch
      :map notmuch-search-mode-map
      :nv "d" #'aap/notmuch-delete-search-message)
(map! :after notmuch
      :map notmuch-show-mode-map
      :nv "d" #'aap/notmuch-delete-show-message)
#+END_SRC

*** Sending
*** Identities
#+BEGIN_SRC emacs-lisp
(setq gnus-alias-identity-alist
    '(("personal"
        nil ;; Does not refer to any other identity
        "David Spreekmeester <david@spreekmeester.nl>" ;; Sender address
        nil ;; No organization header
        nil ;; No extra headers
        nil ;; No extra body text
        "~/Templates/mail-signatures/personal.txt")
    ("grrr"
        nil
        "David Spreekmeester <david@grrr.nl>"
        "GRRR"
        nil
        nil
        "~/Templates/mail-signatures/grrr.txt")))
(setq gnus-alias-default-identity "grrr")
;; Define rules to match work identity
(setq gnus-alias-identity-rules
    '(
        ("grrr"
        ("any" "<\\(.+\\)\\@grrr\\.nl" both) "grrr")
        )
    )

;; Determine identity when message-mode loads
(add-hook 'message-setup-hook 'gnus-alias-determine-identity)
#+END_SRC
*** Mail accounts
#+BEGIN_SRC emacs-lisp
(setq sendmail-program "gmi")

(defun aap/set-mail-sender-personal ()
    (interactive)
    (setq message-sendmail-extra-arguments '("send" "--quiet" "-t" "-C" "~/Mail/account.personal"))
    (when (eq major-mode 'message-mode)
        (gnus-alias-use-identity "personal"))
)
(defun aap/set-mail-sender-grrr ()
    (interactive)
    (setq message-sendmail-extra-arguments '("send" "--quiet" "-t" "-C" "~/Mail/account.grrr"))
    (when (eq major-mode 'message-mode)
        (gnus-alias-use-identity "grrr"))
)

(aap/set-mail-sender-grrr)

(map! :leader
    :prefix ("M" . "mail")
    :desc "personal" "p" #'aap/set-mail-sender-personal
    :desc "grrr" "g" #'aap/set-mail-sender-grrr
    :desc "select identity" "s" #'gnus-alias-select-identity
)
#+END_SRC

[[https://github.com/gauteh/lieer/wiki/GNU-Emacs-and-Lieer][Lieer docs on Emacs + Lieer]]

Also:
#+begin_quote
Since your emails will be saved automatically on GMail when sending them with Lieer, you will likely want to turn off saving local copies of outgoing mail.
#+end_quote
#+BEGIN_SRC emacs-lisp
(setq notmuch-fcc-dirs nil)
#+END_SRC
** Org
:PROPERTIES:
:VISIBILITY: content
:END:
*** Agenda
**** Custom Agenda views
 #+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
    '(
        ("b" "Both" agenda "Universeel"
         ((org-agenda-files '("~/Notes/todo-thuis.org" "~/Nextcloud/org-mode/notes/todo-grrr.org"))))
        ("z" "Zelf" agenda "Persoonlijk"
         ((org-agenda-files '("~/Notes/todo-thuis.org"))))
        ("g" "GRRR" agenda "Werk"
         ((org-agenda-files '("~/Notes/todo-grrr.org"))))
    )
)
#+END_SRC
**** Agenda groups
#+BEGIN_SRC emacs-lisp
;(let ((org-super-agenda-groups
;       '((:auto-category t))))
;  (org-agenda-list))

(setq org-super-agenda-groups
      '((:name "Next Items"
               :time-grid t
               :tag ("NEXT" "outbox"))
        (:name "Important"
               :priority "A")
        (:name "Quick Picks"
               :effort< "0:30")
        (:priority<= "B"
                     :scheduled future
                     :order 1)))
#+END_SRC
*** Export
Setting some non-insane defaults for LaTeX PDF export and such.

**** Links
 #+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-latex-packages-alist "\\hypersetup{setpagesize=false}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{colorlinks=true}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{linkcolor=blue}" t)
    (add-to-list 'org-latex-packages-alist "\\hypersetup{draft}" t)
)
#+END_SRC
For now, I set all LaTeX links to /draft/, to hide them in exports.

***** NEXT [#C] Show only urls in LaTeX export
Ideally, I only want to export urls, but ignore the internal Org-roam links in exporting.

Perhaps achievable with one of these options:
#+begin_example latex
hidelinks
\hyper@link
\hyper@linkfile
\hyper@linkurl
#+end_example
**** Font
 #+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-latex-packages-alist "\\usepackage{lmodern}" t)
)
#+END_SRC
***** TODO Fix LaTeX font export
Setting above doesn't seem to work yet.
Suspecting this method only works per document.
https://github.com/xgarrido/org-resume should provide enough working examples.
**** Paragraph
 #+BEGIN_SRC emacs-lisp
(after! org
    (add-to-list 'org-latex-packages-alist "\\setlength\\parindent{0pt}" t)
)
#+END_SRC
**** Sources
- More options in this [[https://www.tug.org/applications/hyperref/manual.html#x1-90003.5][LaTeX hyperref manual]].
- [[https://www.overleaf.com/learn/latex/Font_sizes,_families,_and_styles][Very clear guide]] by Overleaf
- Some settings are inspired by:
  [[http://clothoid.html.xdomain.jp/2018/org-latex-pdf-with-minted-python.html][Clothoid's org-latex-pdf user config]]
*** General
 #+BEGIN_SRC emacs-lisp
;; `org-directory' must be set before org loads.
(setq org-directory "~/Notes/")
#+END_SRC
*** GUI
Customizing the appearance of bullets and priorities.
#+BEGIN_SRC emacs-lisp
(use-package! org-fancy-priorities
   :defer t
   :hook
   (org-mode . org-fancy-priorities-mode)
   :config
   (setq org-fancy-priorities-list '("⚡" "👉" "⏳")))

(after! org
    (add-hook! 'org-mode-hook (lambda ()
        (org-superstar-mode 1)
        (org-fancy-priorities-mode 1)
    ))
)

(after! org-superstar
  (setq org-superstar-headline-bullets-list '("⚛" "◉" "○" "✸" "✿" "✤" "✜" "◆")
    org-superstar-prettify-item-bullets t))
#+END_SRC
*** Performance
 #+BEGIN_SRC emacs-lisp
(after! org
    (setq org-agenda-dim-blocked-tasks nil)
    (setq org-agenda-inhibit-startup nil)
    (setq org-agenda-use-tag-inheritance nil)
    (setq org-agenda-ignore-properties '(visibility category))
    (setq org-agenda-sticky t)
)
#+END_SRC
*** Todo
 #+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
    '((sequence "TODO" "NEXT" "DONE" "PROJ" "IDEA")))
#+END_SRC
** Org-roam
:PROPERTIES:
:VISIBILITY: content
:END:
*** General
 #+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/Notes/")
(setq org-roam-db-location "~/Nextcloud/org-mode/org-roam.db")
(setq org-roam-buffer-width 0.17)
(setq org-roam-buffer "Org-roam Sidebar")
(setq org-roam-completion-system 'default)

(use-package! company-org-roam
  :when (featurep! :completion company)
  :after org-roam
  :config
  (set-company-backend! 'org-roam-mode 'company-org-roam))
#+END_SRC
*** Graph / Server
 #+BEGIN_SRC emacs-lisp
(setq org-roam-graph-exclude-matcher '("private" "dailies"))

(use-package! simple-httpd
  :defer t
  :after org
  :config
  (setq httpd-root "/var/www")
)
;; Auto-start of graph server disabled to improve startup performance
;;(httpd-start)

;;  :ensure nil
(use-package! org-roam-server
  :defer t
  :after org
  :load-path "~/.local/share/org-roam-server")
#+END_SRC
*** Search
 #+BEGIN_SRC emacs-lisp
;; org-ql for queries
;(use-package org-ql)

;; org-rifle for fast narrow-down searches
;(use-package helm-org-rifle
;  :after org
;)
#+END_SRC
** Deft
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
(after! 'deft
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/Nextcloud/org-mode/")
)
(use-package! deft
  :after org
  :defer t
 ;:bind
 ;("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/Nextcloud/org-mode/")
  :config
  (setq deft-file-limit 200)
)
#+END_SRC
** PHP
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
;; php
(use-package! phpactor
  :mode "\\.php\\'"
  :defer t
)
(use-package! company-phpactor
  :mode "\\.php\\'"
  :defer t
)
;;(composer-setup-managed-phar)
;;(phpactor-install-or-update)
(use-package! php-mode
  :mode "\\.php\\'"
  :defer t
  :hook ((php-mode . (lambda () (set (make-local-variable 'company-backends)
       '(;; list of backends
         company-phpactor
         company-files
         ))))))
#+END_SRC
** PlantUML
 #+BEGIN_SRC emacs-lisp
(after! plantuml
    (setq org-plantuml-jar-path (expand-file-name "~/Apps/PlantUML/plantuml.jar")
      plantuml-default-exec-mode 'jar)
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
)
#+END_SRC
** Projectile
:PROPERTIES:
:VISIBILITY: folded
:END:
 #+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/Scripts/" "~/Sites/" "~/Remotes" "~/Lab"))
#+END_SRC
** RSS
#+BEGIN_SRC emacs-lisp
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/Notes/rss_feeds.org"))
#+END_SRC
** Slack
#+BEGIN_SRC emacs-lisp
(use-package! slack
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  (setq slack-buffer-function #'switch-to-buffer)
  :config
  (slack-register-team
   :name "grrr"
   :default t
   :token slack-token
   :subscribed-channels '(general tech-links tech)
   :full-and-display-names t))

(map! :leader
    :prefix ("S" . "Slack")
    :desc "start" "s" #'slack-start
    :desc "rooms" "r" #'slack-select-rooms
    :desc "unread" "u" #'slack-select-unread-rooms
)

(evil-define-key 'normal slack-info-mode-map
   ",u" 'slack-room-update-messages)
(evil-define-key 'normal slack-mode-map
   ",c" 'slack-buffer-kill
   ",ra" 'slack-message-add-reaction
   ",rr" 'slack-message-remove-reaction
   ",rs" 'slack-message-show-reaction-users
   ",mm" 'slack-message-write-another-buffer
   ",me" 'slack-message-edit
   ",md" 'slack-message-delete
   ",u" 'slack-room-update-messages
   ",2" 'slack-message-embed-mention
   ",3" 'slack-message-embed-channel
   "\C-n" 'slack-buffer-goto-next-message
   "\C-p" 'slack-buffer-goto-prev-message)
  (evil-define-key 'normal slack-edit-message-mode-map
   ",k" 'slack-message-cancel-edit
   ",s" 'slack-message-send-from-buffer
   ",2" 'slack-message-embed-mention
   ",3" 'slack-message-embed-channel))
#+END_SRC
** Undo
:PROPERTIES:
:VISIBILITY: folded
:END:
#+BEGIN_SRC emacs-lisp
;; When using evil-mode be sure to run (global-undo-tree-mode -1) to avoid problems.
;; https://github.com/emacsmirror/undo-fu-session
(add-hook 'emacs-startup-hook (lambda ()
    (global-undo-tree-mode -1)
))

(setq undo-fu-session-file-limit 150)

(setq undo-limit 40000000) ; Set to 40 Mb
(setq evil-want-fine-undo t) ; Prevent all changes acting like one big blob
#+END_SRC
** Own packages
#+BEGIN_SRC emacs-lisp
(use-package goalmap
  :load-path "~/.doom.d/packages/goalmap")
#+END_SRC
* Caveats
:PROPERTIES:
:VISIBILITY: folded
:END:
Apparently, =org-babel= interprets source blocks with type =emacs-lisp=, but not with =elisp=.
Also see this [[https://blog.thomasheartman.com/posts/org-babel-load-file-doesnt-tangle-correctly][blog post on org-babel incorrect tangling]].
* Disabled
:PROPERTIES:
:VISIBILITY: folded
:END:
** Evil mode
(with-eval-after-load 'evil-maps
#+BEGIN_example emacs-lisp
;;(with-eval-after-load 'evil
;;  (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
;;  (define-key evil-motion-state-map (kbd ";") 'evil-ex))
#+END_example
** Various
#+begin_example elisp
(defadvice text-scale-decrease (around all-buffers (arg) activate)
    (dolist (buffer ("Org-roam Sidebar"))
      (with-current-buffer buffer
        ad-do-it)))


(after! org-roam
  (setq org-roam-graph-viewer "/usr/bin/opener"))

;; Om de svgs van GraphViz te openen:
;; (setq org-roam-graph-viewer "/usr/bin/eog")
;; Alleen dus niet met eye of gnome, dat doet alleen bitmaps.

;;(setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))


;; For Org-roam:
;; Replacing region with link to new note
;; To move fleeting notes to their own note.
;; Spoiler alert: it sucks so needs to be improved.
(defun mmr/org-roam-insert-replace-region-with-link-and-follow ()
(interactive )
(let ((title (buffer-substring (mark) (point)) )
        (top (current-buffer)))
    (org-roam-find-file title)
    (let ((target-file (buffer-file-name (buffer-base-buffer)))
        (note-buffer (current-buffer)))
    (switch-to-buffer top nil t)
    (kill-region (mark) (point))
    (insert (concat "[[" target-file "][" title "]]"))
    (switch-to-buffer note-buffer nil t)
    (save-buffer))))
;; To delete a linked note
(defun mmr/remove-linked-org-roam-note ()
(interactive)
(let ((buffer (current-buffer)))
    (org-open-maybe)
    (if (not (eq (current-buffer) buffer))
        (progn
        (crux-delete-file-and-buffer)
        (er/expand-region 1)
        (kill-region (mark) (point))))))
#+end_example

** Bullets
#+begin_example elisp
(after! 'org
    (setq org-bullets-bullet-list '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱" ))
)
(use-package! org-bullets
  :defer t
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("◉" "⁑" "⁂" "❖" "✮" "✱" "✸")))

(straight-use-package 'org-bullets)
(use-package! org-bullets
  :defer t
  :preface
  (defun nasy/org-bullets-mode ()
    (org-bullets-mode 1))
  :hook ((org-mode . nasy/org-bullets-mode))
  :init (gsetq org-bullets-bullet-list
               '(;;; Large
                 "♥"
                 "✿"
                 "❀"
                 "◉"
                 "✸"
                 "•")))
                ;; ♥ ● ○ ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
                ;;; Small
                ;; ► • ★ ▸

(add-hook 'org-mode-hook
          (lambda ()
            (setq org-bullets-bullet-list '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱" ))
          )
)
(setq org-bullets-bullet-list '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱" ))



(add-hook 'org-mode-hook
          (lambda ()
                 ;; ♥ ● ○ ◇ ✚ ✜  ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖
            (setq org-bullets-bullet-list '("❀" "☯" "▶" "☲"  "☳" "☴"  "☶"  "☱" ))
          )
)
#+end_example
* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
